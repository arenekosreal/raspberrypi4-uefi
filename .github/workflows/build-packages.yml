name: Auto Build Arch Packages
on:
  push:
    branches: 
      - main
    paths:
      - '**/PKGBUILD'
      - '.github/workflows/*'

  pull_request:
    branches: 
      - main
    paths:
      - '**/PKGBUILD'
      - '.github/workflows/*'

  workflow_dispatch:

jobs:
  scan-package:
    name: Scan packages needs to build
    runs-on: ubuntu-24.04-arm
    outputs:
      package: ${{ steps.scan-package.outputs.package }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Scan package
        id: scan-package
        run: |
          declare d 
          declare -a items
          while read -r d
          do
            items+=("$d")
          done < <(find . -maxdepth 2 -mindepth 2 -type f -name "PKGBUILD" -printf "%h\n" | rev | cut -d / -f 1 | rev)
          echo -n "package=" >> "$GITHUB_OUTPUT"
          jq --compact-output --null-input --raw-output '$ARGS.positional' --args "${items[@]}" >> "$GITHUB_OUTPUT"
  
  package-build:
    name: Build and Upload Packages for PKGBUILD in this repository
    runs-on: ubuntu-24.04-arm
    needs: scan-package
    strategy:
      matrix:
        package: ${{ fromJson(needs.scan-package.outputs.package) }}
    steps: 
      - name: Checkout
        uses: actions/checkout@v5

      # This file will return 403 if downloads directly.
      # Original url: https://uefi.org/sites/default/files/resources/dbxupdate_arm64.bin
      - name: Place static file
        if: matrix.package == 'uefi-raspberrypi4' && ! github.event.act.local
        run: |
          mkdir -p srcdest
          echo '${{ vars.DBXUPDATE_ARM64_BIN_BASE64 }}' | base64 -d > srcdest/arm64_dbx.bin

      - name: Generate .SRCINFO
        uses: arenekosreal/makepkg-action@v0.2.3
        with:
          builddir: ${{ matrix.package }}
          args: --printsrcinfo
          stdout: ${{ matrix.package }}/.SRCINFO

      - name: Print .SRCINFO
        run: cat "${{ matrix.package }}/.SRCINFO"

      - name: Generate artifact name
        id: artifact-name
        run: |
          printf "artifact-name=%s %s-%d %s\n" \
            "$(grep pkgbase '${{ matrix.package }}/.SRCINFO' | cut -d = -f 2- | xargs)" \
            "$(grep pkgver '${{ matrix.package }}/.SRCINFO' | cut -d = -f 2- | xargs)" \
            "$(grep pkgrel '${{ matrix.package }}/.SRCINFO' | cut -d = -f 2- | xargs)" \
            "$(uname -m)" \
          >> "$GITHUB_OUTPUT"

      - name: Build
        uses: arenekosreal/makepkg-action@v0.2.3
        with:
          builddir: ${{ matrix.package }}
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Ensure permission
        run: |
          sudo chown -R --reference ~ pkgdest
          ls -l pkgdest

      - name: Create archive to avoid illegal char in name
        run: |
          find pkgdest -maxdepth 1 -type f -name '*.pkg.tar.*' -printf "%f\n" | \
            xargs tar -c -f repo.tar -p -C pkgdest

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact-name.outputs.artifact-name }}
          path: repo.tar
          if-no-files-found: error

  release:
    name: Grab built packages and release
    runs-on: ubuntu-24.04-arm
    needs: package-build
    permissions:
      contents: write
    if: github.event.act.local || github.event_name == 'push'
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v6

      - name: Unpack artifacts
        run: |
          mkdir -p pkgdest
          find . -mindepth 2 -maxdepth 2 -type f -name 'repo.tar' -exec tar -x -p -C ./pkgdest -f {} \;

      - name: Generate Release info
        id: release-info
        run: |
          cd pkgdest
          {
            echo 'CI Build for commit ${{ github.sha }}'
            echo
            echo 'sha256sums:'
            echo '```'
            sha256sum *.pkg.tar.*
            echo '```'
          } > ../notes.md
          echo date=$(date -I | sed s/-//g) >> "$GITHUB_OUTPUT"
          
      - name: Push to GitHub Releases
        if: ${{ ! github.event.act.local }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create '${{ steps.release-info.outputs.date }}' \
            --target '${{ github.sha }}' \
            --title 'Raspberry Pi 4 UEFI Boot Packages for Arch Based Linux Distribution' \
            --notes-file notes.md \
            --repo '${{ github.repository }}' \
            --draft --generate-notes
          gh release upload '${{ steps.release-info.outputs.date }}' ./pkgdest/*.pkg.tar.* \
            --repo '${{ github.repository }}' \
            --clobber
          gh release edit '${{ steps.release-info.outputs.date }}' \
            --repo '${{ github.repository }}' \
            --draft=false

      - name: Save to volume
        if: github.event.act.local
        run: |
          cp --target-directory /act/out ./pkgdest/*.pkg.tar.*
