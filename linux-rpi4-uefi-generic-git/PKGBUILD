# Maintainer: zhanghua <zhanghua.00@qq.com>

buildarch=8 # aarch64

USE_LLVM=${USE_LLVM:-false}
# Weather using LLVM or GCC

pkgbase="linux-rpi4-uefi-generic"
pkgname=("linux-rpi4-uefi-generic-git" "linux-headers-rpi4-uefi-generic-git" "linux-api-headers-rpi4-uefi-generic-git" "linux-docs-rpi4-uefi-generic-git")
pkgver=6.0.rc7.r68.49c13ed0316d
pkgrel=1
url="https://github.com/torvalds/linux"
arch=("aarch64")
license=("GPL")
groups=("raspberrypi4-uefi")
makedepends=("libelf" "pahole" "cpio" "perl" "tar" "xz" "python-sphinx" "python-sphinx_rtd_theme" "graphviz" "imagemagick" "xmlto" "kmod" "bc" "git" "rsync")
options=("!strip")
if [ $(uname -m) != "aarch64" ]
then
    options+=(!ccache)
    export ARCH=arm64
    export CROSS_COMPILE=aarch64-linux-gnu-
fi
if [[ ${USE_LLVM} == true ]]
then
    # LLVM
    makedepends+=("clang" "lld" "llvm")
    export LLVM=1
    export _STRIPBIN=/usr/bin/llvm-strip
elif [ $(uname -m) != "aarch64" ]
then
    # GCC Cross-compile
    makedepends+=("aarch64-linux-gnu-gcc")
    export _STRIPBIN=/usr/bin/${CROSS_COMPILE}strip
else
    # native compile
    export _STRIPBIN=/usr/bin/strip
fi

sha256sums=('82e6886938854236037a9c5d1763e59675b5f1dfeabffc93645a52da39d0c21c'
            '48eda7e88c5905403992595eb67e91b3afb011a8055f14a8cc9e3719e72a6e02'
            'SKIP')
source=(
    0001-CONFIG_USER_NS_UNPRIVILEGED.patch
    config-generic
    linux-generic::git+https://github.com/torvalds/linux.git
)

export LOCALVERSION=""
# Disable annoying '+' in modules folder and kernel name

pkgver(){
    cd ${srcdir}/linux-generic
    version_str=$(make -s kernelversion | sed 's/.0//;s/-/./') # 5.19.rc6/5.19
    release_num=r$(git rev-list --count v$(make -s kernelversion | sed 's/.0//')..HEAD)
    commit_id=$(git rev-parse --short HEAD)
    echo ${version_str}.${release_num}.${commit_id} # 5.19.rc6.rxxx.xxx/5.19.rxxx.xxx
}
prepare(){
    cd ${srcdir}/linux-generic
    cp ${srcdir}/config-generic .config
    git apply ${srcdir}/0001-CONFIG_USER_NS_UNPRIVILEGED.patch
    make olddefconfig
    echo "-$pkgrel" > localversion.10-pkgrel
    echo "${pkgbase#linux}" > localversion.20-pkgname
    make -s kernelrelease > version
    scripts/setlocalversion --save-scmversion
    make prepare
}
build(){
    [[ ! -z MAKEFLAGS ]] && export MAKEFLAGS=-j$(nproc)
    cd ${srcdir}/linux-generic
    make modules
    make Image.gz
}
package_linux-rpi4-uefi-generic-git(){
    pkgdesc="The Linux Kernel and modules for Raspberrypi 4 UEFI Generic Kernel."
    depends=("coreutils" "kmod" "initramfs")
    optdepends=(
        "crda: to set the correct wireless channels of your country" 
        "linux-firmware: firmware images needed for some devices"
        "uefi-raspberrypi4: for UEFI firmware"
    )
    provides=("linux=${pkgver%%.r*}")
    replaces=("raspberrypi4-uefi-linux-generic-git")
    cd ${srcdir}/linux-generic
	kernver=$(cat version)

    mkdir -p ${pkgdir}/usr
	make modules_install INSTALL_MOD_PATH=${pkgdir}/usr DEPMOD=/usr/bin/true

    # systemd expects to find the kernel here to allow hibernation
    # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
    install -Dm644 "$(make -s image_name)" ${pkgdir}/usr/lib/modules/${kernver}/vmlinuz
	echo ${pkgbase} | install -Dm644 /dev/stdin ${pkgdir}/usr/lib/modules/${kernver}/pkgbase
	rm ${pkgdir}/usr/lib/modules/${kernver}/{source,build}
}
package_linux-headers-rpi4-uefi-generic-git(){
    pkgdesc="Header files and scripts for building modules for Raspberrypi 4 UEFI Generic Kernel."
    provides=("linux-headers=${pkgver%%.r*}")
    replaces=("raspberrypi4-uefi-kernel-headers-generic-git" "raspberrypi4-uefi-linux-headers-generic-git")
    depends=("pahole")
    cd ${srcdir}/linux-generic
	kernver=$(make kernelrelease)
	install -Dt ${pkgdir}/usr/lib/modules/${kernver}/build -m644 Makefile .config Module.symvers System.map \
        localversion.* version vmlinux
	install -Dt ${pkgdir}/usr/lib/modules/${kernver}/build/kernel -m644 kernel/Makefile
    install -Dt ${pkgdir}/usr/lib/modules/${kernver}/build/arch/arm64 -m644 arch/arm64/Makefile
	cp -t ${pkgdir}/usr/lib/modules/${kernver}/build -a include scripts
    # required when STACK_VALIDATION is enabled
    #install -Dt ${pkgdir}/usr/lib/modules/${kernver}/build/tools/objtool tools/objtool/objtool
    # required when DEBUG_INFO_BTF_MODULES is enabled
    #install -Dt ${pkgdir}/usr/lib/modules/${kernver}/build/tools/bpf/resolve_btfids tools/bpf/resolve_btfids/resolve_btfids
	install -Dt ${pkgdir}/usr/lib/modules/${kernver}/build/arch/arm64/kernel -m644 arch/arm64/kernel/asm-offsets.s
	cp -t ${pkgdir}/usr/lib/modules/${kernver}/build/arch/arm64 -a arch/arm64/include
	install -Dt ${pkgdir}/usr/lib/modules/${kernver}/build/drivers/md -m644 drivers/md/*.h
	install -Dt ${pkgdir}/usr/lib/modules/${kernver}/build/net/mac80211 -m644 net/mac80211/*.h
	# http://bugs.archlinux.org/task/13146
	install -Dt ${pkgdir}/usr/lib/modules/${kernver}/build/drivers/media/i2c -m644 drivers/media/i2c/msp3400-driver.h
	# http://bugs.archlinux.org/task/20402
	install -Dt ${pkgdir}/usr/lib/modules/${kernver}/build/drivers/media/usb/dvb-usb -m644 drivers/media/usb/dvb-usb/*.h
	install -Dt ${pkgdir}/usr/lib/modules/${kernver}/build/drivers/media/dvb-frontends -m644 drivers/media/dvb-frontends/*.h
	install -Dt ${pkgdir}/usr/lib/modules/${kernver}/build/drivers/media/tuners -m644 drivers/media/tuners/*.h
    # https://bugs.archlinux.org/task/71392
    install -Dt ${pkgdir}/usr/lib/modules/${kernver}/build/drivers/iio/common/hid-sensors -m644 drivers/iio/common/hid-sensors/*.h
	# copy in Kconfig files
	find . -name Kconfig\* -exec install -Dm644 {} "${pkgdir}/usr/lib/modules/${kernver}/build/{}" \;
	# remove unneeded architectures
	local arch
	for arch in ${pkgdir}/usr/lib/modules/${kernver}/build/arch/*/;do
		[[ ${arch} == */arm64/ ]] && continue
		rm -r ${arch}
	done
	# remove files already in linux-docs package
	rm -r ${pkgdir}/usr/lib/modules/${kernver}/build/Documentation
	# remove now broken symlinks
	find -L "${pkgdir}/usr/lib/modules/${kernver}/build" -type l -printf 'Removing %P\n' -delete
    find "${pkgdir}/usr/lib/modules/${kernver}/build" -type f -name '*.o' -printf 'Removing %P\n' -delete
	# strip scripts directory
	local _binary _strip
	while read -rd '' _binary; do
    	case "$(file -bi "${_binary}")" in
      		*application/x-sharedlib*)      _strip="${STRIP_SHARED}"   ;; # Libraries (.so)
      		*application/x-archive*)        _strip="${STRIP_STATIC}"   ;; # Libraries (.a)
      		*application/x-executable*)     _strip="${STRIP_BINARIES}" ;; # Binaries
            *application/x-pie-executable*) _strip="${STRIP_SHARED}"   ;; # Relocatable binaries
      		*) continue ;;
    	esac
    	${_STRIPBIN} ${_strip} "${_binary}"
  	done < <(find "${pkgdir}/usr/lib/modules/${kernver}/build" -type f -perm -u+x ! -name vmlinux -print0)
    ${_STRIPBIN} ${STRIP_STATIC} "${pkgdir}/usr/lib/modules/${kernver}/build/vmlinux"
    mkdir -p ${pkgdir}/usr/src
    ln -sr ${pkgdir}/usr/lib/modules/${kernver}/build ${pkgdir}/usr/src/${pkgbase}
}
package_linux-api-headers-rpi4-uefi-generic-git(){
    pkgdesc="Kernel headers sanitized for use in userspace for Raspberrypi 4 UEFI Generic Kernel."
	provides=("linux-api-headers=${pkgver%%.r*}")
    conflicts=("linux-api-headers")
    replaces=("raspberrypi4-uefi-kernel-api-headers-generic-git" "raspberrypi4-uefi-linux-api-headers-generic-git")
    cd ${srcdir}/linux-generic
	make INSTALL_HDR_PATH="${pkgdir}/usr" headers_install
	# use headers from libdrm
	rm -r "${pkgdir}/usr/include/drm"
}
package_linux-docs-rpi4-uefi-generic-git(){
    pkgdesc="Documentation for the RaspberryPi 4 UEFI Generic Kernel."
    provides=("linux-docs=${pkgver%%.r*}")
    replaces=("raspberrypi4-uefi-kernel-docs-generic-git" "raspberrypi4-uefi-linux-docs-generic-git")
    cd ${srcdir}/linux-generic
    kernver=$(make kernelrelease)
    local src dst
    while read -rd '' src; do
        dst="${src#Documentation/}"
        dst="${pkgdir}/usr/lib/modules/${kernver}/build/Documentation/${dst#output/}"
        install -Dm644 "$src" "$dst"
    done < <(find Documentation -name '.*' -prune -o ! -type d -print0)
    mkdir -p ${pkgdir}/usr/share/doc
    ln -sr ${pkgdir}/usr/lib/modules/${kernver}/build ${pkgdir}/usr/share/doc/${pkgbase}
}
