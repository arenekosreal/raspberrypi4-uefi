# Maintainer: zhanghua <zhanghua.00@qq.com>

buildarch=8 # aarch64

KBRANCH=5.17
# Only need if you are using raspberrypi kernel
USE_LLVM=false
# Weather useing LLVM or GCC

pkgbase="raspberrypi4-uefi-linux-raspberrypi-git"
pkgname=("raspberrypi4-uefi-linux-raspberrypi-git" "raspberrypi4-uefi-linux-headers-raspberrypi-git" "raspberrypi4-uefi-linux-api-headers-raspberrypi-git" "raspberrypi4-overlays-git" "raspberrypi4-uefi-linux-docs-raspberrypi-git")
pkgver=5.17.0.9315d18e6
pkgrel=1
url="https://github.com/raspberrypi/linux"
arch=("aarch64")
license=("GPL")
groups=("raspberrypi4-uefi")
makedepends=("libelf" "pahole" "cpio" "perl" "tar" "xz" "python-sphinx" "python-sphinx_rtd_theme" "graphviz" "imagemagick" "xmlto" "kmod" "bc" "git" "rsync")
options=("!strip")
if [ $(uname -m) != "aarch64" ]
then
    options+=(!ccache)
    export ARCH=arm64
    export CROSS_COMPILE=aarch64-linux-gnu-
fi
if [[ ${USE_LLVM} == true ]]
then
    # LLVM
    makedepends+=("clang" "lld" "llvm")
    export LLVM=1
    export _STRIPBIN=/usr/bin/llvm-strip
elif [ $(uname -m) != "aarch64" ]
then
    # GCC Cross-compile
    makedepends+=("aarch64-linux-gnu-gcc")
    export _STRIPBIN=/usr/bin/${CROSS_COMPILE}strip
else
    # native compile
    export _STRIPBIN=/usr/bin/strip
fi
sha256sums=('2db4b94c07c44de78e95edaf257c54a4a31dba578cf98a25080113ad6137430d'
            'e3f755248af1cb966b6a1b4fb172ac68ea797bffd4a2236f96ead6da76d699e5'
            '369d233ea5311e1a4b0b5f771189a35e214bc0e49d85cdd076403bb7499f928d'
            '2ba5286a81358f87aa73e6a95c3c610c5f3007e7824729a64999e508d21559b0'
            '3b44c20e9bcbeeb958cbf62d3d02a8a078fde637ba7c0eaffd06154bc5563392'
            '382c9f294bf2a833a071ce8faa0df552c64aa8eb526dc10dc962f824cda3d81d'
            '0fab6d9c0111b18220445886f0d7db4d6120b5b59760bad45270a3566f45cf5c'
            'a01ef643ca47bee5d9ccb22bb407c61430f48a6e9d877a904b1d3606d4f69f28')
source=(
    97-modify-grub-kernel-cmdline.hook
	98-update-initramfs.hook
    98-remove-initramfs.hook
	update-initramfs
    remove-initramfs
    modify-grub-cmdline
    config-raspberrypi
    linux.preset
)

export LOCALVERSION=""
# Disable annoying '+' in modules folder and kernel name

pkgver(){
    cd ${srcdir}/linux
    echo $(make kernelversion | sed "s/-.*//").$(git rev-parse --short HEAD)
}
prepare(){
    if [[ -d ${srcdir}/linux/.git ]]
    then
        cd ${srcdir}/linux
        git reset --hard HEAD && git pull --depth=1 origin rpi-${KBRANCH}.y || git fetch --depth=1 origin rpi-${KBRANCH}.y && git checkout rpi-${KBRANCH}.y
        if [ -f .config ];then
            mv .config .config.old
        fi
    else
        rm -rf ${srcdir}/linux
        mkdir ${srcdir}/linux
        cd ${srcdir}/linux
        git init -q
        git remote add origin https://github.com/raspberrypi/linux.git
        git fetch --depth=1 origin rpi-${KBRANCH}.y
        git checkout rpi-${KBRANCH}.y
    fi
    # move to source once it supports depth=1 option
    cp ${srcdir}/config-raspberrypi .config
    make olddefconfig
    sed -i "s/CONFIG_LOCALVERSION_AUTO=y/# CONFIG_LOCALVERSION_AUTO is not set/;s/CONFIG_SURFACE_PLATFORMS=y/# CONFIG_SURFACE_PLATFORMS is not set/" .config
    echo "-$pkgrel" > localversion.10-pkgrel
    echo "" > localversion.20-pkgname
    make -s kernelrelease > version
    scripts/setlocalversion --save-scmversion
}
build(){
    cd ${srcdir}/linux
    make -j$(nproc)
}
package_raspberrypi4-overlays-git(){
    pkgdesc="/boot/overlays folder, needed for UEFI firmware and kernel"
    conflicts=("raspberrypi-devicetree" "raspberrypi4-overlays")
    provides=("raspberrypi4-overlays")
    cd ${srcdir}/linux
    mkdir -p ${pkgdir}/boot/overlays
    cp ${srcdir}/linux/arch/arm64/boot/dts/overlays/{README,*.dtb*} ${pkgdir}/boot/overlays
}
package_raspberrypi4-uefi-linux-raspberrypi-git(){
    pkgdesc="The Linux Kernel and modules for Raspberrypi 4 UEFI RaspberryPi Kernel."
    depends=("coreutils" "kmod" "initramfs" "raspberrypi4-overlays")
    optdepends=(
        "crda: to set the correct wireless channels of your country" 
        "linux-firmware: firmware images needed for some devices"
        "raspberrypi4-uefi-firmware: for UEFI firmware"
    )
    provides=("linux=${pkgver%.*}" "raspberrypi4-uefi-linux=${pkgver%.*}")
    conflicts=("linux" "uboot-raspberrypi" "raspberrypi4-uefi-linux")
    replaces=("raspberrypi4-uefi-kernel-raspberrypi-git")
    cd ${srcdir}/linux
	kernver=$(make kernelrelease)
    mkdir -p ${pkgdir}/{boot,usr,boot/dtbs}
	make zinstall INSTALL_PATH=${pkgdir}/boot
	make modules_install INSTALL_MOD_PATH=${pkgdir}/usr
	make dtbs_install INSTALL_DTBS_PATH=${pkgdir}/boot/dtbs
	cp ${pkgdir}/boot/dtbs/broadcom/bcm271*-rpi-*.dtb ${pkgdir}/boot
	rm -rf ${pkgdir}/boot/dtbs
	cp .config ${pkgdir}/boot/config-${kernver}
    # systemd expects to find the kernel here to allow hibernation
    # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
    install -Dm644 "$(make -s image_name)" ${pkgdir}/usr/lib/modules/${kernver}/vmlinuz
	echo ${kernver} | install -Dm644 /dev/stdin ${pkgdir}/usr/lib/modules/${kernver}/pkgbase
	rm ${pkgdir}/usr/lib/modules/${kernver}/{source,build}
    install -Dm755 ${srcdir}/modify-grub-cmdline ${pkgdir}/usr/share/libalpm/scripts/modify-grub-cmdline
    install -Dm755 ${srcdir}/update-initramfs ${pkgdir}/usr/share/libalpm/scripts/update-initramfs
    install -Dm755 ${srcdir}/remove-initramfs ${pkgdir}/usr/share/libalpm/scripts/remove-initramfs
    install -Dm644 ${srcdir}/97-modify-grub-kernel-cmdline.hook ${pkgdir}/usr/share/libalpm/hooks/97-modify-grub-kernel-cmdline.hook
    install -Dm644 ${srcdir}/98-update-initramfs.hook ${pkgdir}/usr/share/libalpm/hooks/98-update-initramfs.hook
    install -Dm644 ${srcdir}/98-remove-initramfs.hook ${pkgdir}/usr/share/libalpm/hooks/98-remove-initramfs.hook
    install -Dm644 ${srcdir}/linux.preset ${pkgdir}/etc/mkinitcpio.d/${kernver}.preset
    sed -i "s/%KERNVER%/${kernver}/g;s/%PKGBASE%/${pkgbase}/g" ${pkgdir}/etc/mkinitcpio.d/${kernver}.preset
    sed -i "s/%KERNVER%/${kernver}/g;s/%PKGBASE%/${pkgbase}/g" ${pkgdir}/usr/share/libalpm/hooks/98-remove-initramfs.hook
    sed -i "s/%KERNVER%/${kernver}/g;s/%PKGBASE%/${pkgbase}/g" ${pkgdir}/usr/share/libalpm/scripts/update-initramfs
    sed -i "s/%KERNVER%/${kernver}/g;s/%PKGBASE%/${pkgbase}/g" ${pkgdir}/usr/share/libalpm/scripts/remove-initramfs
}
package_raspberrypi4-uefi-linux-headers-raspberrypi-git(){
    pkgdesc="Header files and scripts for building modules for Raspberrypi 4 UEFI RaspberryPi Kernel."
    provides=("linux-headers=${pkgver%.*}" "raspberrypi4-uefi-linux-headers=${pkgver%.*}")
    conflicts=("linux-headers")
    replaces=("raspberrypi4-uefi-linux-headers-rapberrypi-git")
    depends=("pahole")
    cd ${srcdir}/linux
	kernver=$(make kernelrelease)
	install -Dt ${pkgdir}/usr/lib/modules/${kernver}/build -m644 Makefile .config Module.symvers System.map \
        localversion.* version vmlinux
	install -Dt ${pkgdir}/usr/lib/modules/${kernver}/build/kernel -m644 kernel/Makefile
	install -Dt ${pkgdir}/usr/lib/modules/${kernver}/build/arch/arm64 -m644 arch/arm64/Makefile
	cp -t ${pkgdir}/usr/lib/modules/${kernver}/build -a include scripts
    # required when STACK_VALIDATION is enabled
    #install -Dt ${pkgdir}/usr/lib/modules/${kernver}/build/tools/objtool tools/objtool/objtool
    # required when DEBUG_INFO_BTF_MODULES is enabled
    #install -Dt ${pkgdir}/usr/lib/modules/${kernver}/build/tools/bpf/resolve_btfids tools/bpf/resolve_btfids/resolve_btfids
	install -Dt ${pkgdir}/usr/lib/modules/${kernver}/build/arch/arm64/kernel -m644 arch/arm64/kernel/asm-offsets.s
	cp -t ${pkgdir}/usr/lib/modules/${kernver}/build/arch/arm64 -a arch/arm64/include
	install -Dt ${pkgdir}/usr/lib/modules/${kernver}/build/drivers/md -m644 drivers/md/*.h
	install -Dt ${pkgdir}/usr/lib/modules/${kernver}/build/net/mac80211 -m644 net/mac80211/*.h
	# http://bugs.archlinux.org/task/13146
	install -Dt ${pkgdir}/usr/lib/modules/${kernver}/build/drivers/media/i2c -m644 drivers/media/i2c/msp3400-driver.h
	# http://bugs.archlinux.org/task/20402
	install -Dt ${pkgdir}/usr/lib/modules/${kernver}/build/drivers/media/usb/dvb-usb -m644 drivers/media/usb/dvb-usb/*.h
	install -Dt ${pkgdir}/usr/lib/modules/${kernver}/build/drivers/media/dvb-frontends -m644 drivers/media/dvb-frontends/*.h
	install -Dt ${pkgdir}/usr/lib/modules/${kernver}/build/drivers/media/tuners -m644 drivers/media/tuners/*.h
    # https://bugs.archlinux.org/task/71392
    install -Dt ${pkgdir}/usr/lib/modules/${kernver}/build/drivers/iio/common/hid-sensors -m644 drivers/iio/common/hid-sensors/*.h
	# copy in Kconfig files
	find . -name Kconfig\* -exec install -Dm644 {} "${pkgdir}/usr/lib/modules/${kernver}/build/{}" \;
	# remove unneeded architectures
	local arch
	for arch in ${pkgdir}/usr/lib/modules/${kernver}/build/arch/*/;do
		[[ ${arch} == */arm64/ ]] && continue
		rm -r ${arch}
	done
	# remove files already in linux-docs package
	rm -r ${pkgdir}/usr/lib/modules/${kernver}/build/Documentation
	# remove now broken symlinks
	find -L "${pkgdir}/usr/lib/modules/${kernver}/build" -type l -printf 'Removing %P\n' -delete
    find "${pkgdir}/usr/lib/modules/${kernver}/build" -type f -name '*.o' -printf 'Removing %P\n' -delete
	# strip scripts directory
	local _binary _strip
	while read -rd '' _binary; do
    	case "$(file -bi "${_binary}")" in
      		*application/x-sharedlib*)      _strip="${STRIP_SHARED}"   ;; # Libraries (.so)
      		*application/x-archive*)        _strip="${STRIP_STATIC}"   ;; # Libraries (.a)
      		*application/x-executable*)     _strip="${STRIP_BINARIES}" ;; # Binaries
            *application/x-pie-executable*) _strip="${STRIP_SHARED}"   ;; # Relocatable binaries
      		*) continue ;;
    	esac
    	${_STRIPBIN} ${_strip} "${_binary}"
  	done < <(find "${pkgdir}/usr/lib/modules/${kernver}/build/scripts" -type f -perm -u+w -print0 2>/dev/null)
    ${_STRIPBIN} ${STRIP_STATIC} "${pkgdir}/usr/lib/modules/${kernver}/build/vmlinux"
    mkdir -p ${pkgdir}/usr/src
    ln -sr ${pkgdir}/usr/lib/modules/${kernver}/build ${pkgdir}/usr/src/${pkgbase}
}
package_raspberrypi4-uefi-linux-api-headers-raspberrypi-git(){
    pkgdesc="Kernel headers sanitized for use in userspace for Raspberrypi 4 UEFI RaspberryPi Kernel."
	provides=("linux-api-headers=${pkgver%.*}" "raspberrypi4-uefi-linux-api-headers=${pkgver%.*}")
	conflicts=("linux-api-headers")
    replaces=("raspberrypi4-uefi-linux-api-headers-raspberrypi-git")
    cd ${srcdir}/linux
	make INSTALL_HDR_PATH="${pkgdir}/usr" headers_install
	# use headers from libdrm
	rm -r "${pkgdir}/usr/include/drm"
}
package_raspberrypi4-uefi-linux-docs-raspberrypi-git(){
    pkgdesc="Documentation for the RaspberryPi 4 UEFI RaspberryPi Kernel."
    provides=("linux-docs=${pkgver%.*}" "raspberrypi4-uefi-linux-docs=${pkgver%.*}")
    conflicts=("linux-docs")
    replaces=("raspberrypi4-uefi-kernel-docs-raspberrypi-git")
    cd ${srcdir}/linux
    kernver=$(make kernelrelease)
    local src dst
    while read -rd '' src; do
        dst="${src#Documentation/}"
        dst="${pkgdir}/usr/lib/modules/${kernver}/build/Documentation/${dst#output/}"
        install -Dm644 "$src" "$dst"
    done < <(find Documentation -name '.*' -prune -o ! -type d -print0)
    mkdir -p ${pkgdir}/usr/share/doc
    ln -sr ${pkgdir}/usr/lib/modules/${kernver}/build ${pkgdir}/usr/share/doc/${pkgbase}
}
